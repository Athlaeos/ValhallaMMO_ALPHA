package me.athlaeos.valhallammo.crafting.dynamicitemmodifiers.item_stats;

import me.athlaeos.valhallammo.ValhallaMMO;
import me.athlaeos.valhallammo.crafting.dynamicitemmodifiers.DynamicItemModifier;
import me.athlaeos.valhallammo.crafting.dynamicitemmodifiers.ModifierCategory;
import me.athlaeos.valhallammo.crafting.dynamicitemmodifiers.ModifierPriority;
import me.athlaeos.valhallammo.utility.Utils;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;

import java.util.Arrays;
import java.util.List;

public class AttributeAddArrowInfinityExploitableModifier extends DynamicItemModifier implements Cloneable{

    public static final NamespacedKey infinityExploitableKey = new NamespacedKey(ValhallaMMO.getPlugin(), "infinity_exploitable");

    public AttributeAddArrowInfinityExploitableModifier(String name, double strength, ModifierPriority priority) {
        super(name, strength, priority);

        this.name = name;
        this.category = ModifierCategory.ITEM_STATS_CUSTOM;

        this.bigStepDecrease = 1;
        this.bigStepIncrease = 1;
        this.smallStepDecrease = 1;
        this.smallStepIncrease = 1;
        this.defaultStrength = 0;
        this.minStrength = 0;
        this.maxStrength = 1;
        this.description = Utils.chat("&7Sets if this item should be infinitely usable by infinity enchanted " +
                "bows or not.");
        this.displayName = Utils.chat("&7&lArrow Modifier: &e&lInfinity Compatible");
        this.icon = Material.ARROW;
    }

    @Override
    public List<String> tabAutoCompleteFirstArg() {
        return Arrays.asList("0-NoInfinity", "1-Infinity");
    }

    @Override
    public ItemStack processItem(Player crafter, ItemStack outputItem) {
        if (outputItem == null) return null;
        ItemMeta outputMeta = outputItem.getItemMeta();
        if (outputMeta == null) return null;
        if (strength == 0){
            outputMeta.getPersistentDataContainer().remove(infinityExploitableKey);
        } else {
            outputMeta.getPersistentDataContainer().set(infinityExploitableKey, PersistentDataType.INTEGER, 1);
        }
        outputItem.setItemMeta(outputMeta);
        return outputItem;
    }

    @Override
    public String toString() {
        if (strength == 0){
            return Utils.chat("&7Arrow &ecannot&7 be exploited by the infinity enchantment");
        } else if (strength == 1){
            return Utils.chat("&7Arrow &ecan&7 be exploited by the infinity enchantment");
        } else {
            return Utils.chat("&cIllegal value");
        }
    }

    public static boolean isInfinityCompatible(ItemStack i){
        if (i == null) return false;
        // ugly fix to make plain arrows infinity compatible again
        if (i.isSimilar(new ItemStack(Material.ARROW))) return true;
        ItemMeta meta = i.getItemMeta();
        if (meta == null) return false;
        if (meta.getPersistentDataContainer().has(infinityExploitableKey, PersistentDataType.INTEGER)) {
            int value = meta.getPersistentDataContainer().get(infinityExploitableKey, PersistentDataType.INTEGER);
            return value == 1;
        }
        return false;
    }
}
